{ "title": "Pharo with Style" } 

We are revisiting the general guideline enounced in the great little book called Smalltalk with Style. 

!! General naming conventions

Names are important. We will never repeat it enough. 
A good name is often driven by a domain. These conventions are not cast in stone but they set the fundation of a common culture.
Avoid underscores and favor camelcase.

!!! Guileline 1: Descriptive names

Choose descriptive names that capture domain entity unambiguously.

!!!! Examples

[[[
timeOfDay
not tod
]]]

[[[
milliseconds
not mil
]]]

[[[
editMenu
not eMenu
]]]



!!! Guileline 2:  Pay attention to meaning

Non english native speaker often misplaced word qualifier. In english the qualifier is often before the word it qualifies. 

@@todo find a real example
[[[
blueCar
]]]

[[[
carBlue
]]]


[[[
userAssociation
]]]
is an association of users.

Compare the three following variables:

[[[
sizeToRead
sizeJustRead
readSize
]]]

From that perspective favor words with unique pronunciation.
About ==readSize==: does this mean that the size was just read (red) or it is the size to read (reed)?



!!! Guileline 3:  Favor simple direct meaning 

Some native english writers use often more precise but less common terms. 
Consider that your software may be read by people from different culture so use 
simple common terms. 


!!! Guileline 4:  Follow domain 

Follow domain and culture of the project. Do not invent your own because you think it is better. 
Favor regularity over preciseness.

[[[
GnatXmlNode
not GNAT_XML_Object
]]]

When representing the XML ada abstract syntax tree in Pharo, we should not follow their naming convention. The name should convey that the class is a abstract syntax tree node hence ==GnatXmlNode== is much better that ==GnatXmlObject==. 

In Moose an importer is an object creating FAMIX entities (classes methods....) from the datastructure representing a language usually an Abstract Syntax Tree. 
Therefore ==GNATInstaller== which creates entities from AST should be renamed ==GnatImporter==
and ==GNATImporter== which load AST in memory should be renamed ==GnatASTLoader==

!!! Guileline 5:  Shared variables starts with uppercase 

Begin class names, global variables, pool variables and class variables with an uppercase letter. If the word is compound, then begin use camel case for the rest.


[[[
Point	"class"
Transcript 	"global variable"
PackageGlobalOrganizer	"class variables"
]]]




!!! Guileline 6:  Private variables starts with lowercase 

Beging instance variables, temporary variables, method parameterr and method selectors with a lower case. If the word is compound, then begin use camel case for the rest.

[[[
address
classExtensionSelectors
classTags
]]]



!!! Guideline: Class names





!! Selectors
Method names in Pharo are called selectors. There are used in messages and are the main vehicule to convey adequate meaning. The correct use of words and design of selectors is important. 


!!! Guideline: selectors as little sentences
Choose method names so that someone reading the message can read the expression as if it were a sentence. 

[[[
FileDescriptor seekTo: word from: self position
and not
FileDescriptor lseek: word at: self position
]]]

Write test first and make sure that your test scenario read well. 

!!! Guideline: imperative verbs for actions

Use imperative verbs for message which perform an action.


[[[
transform
	selectors do: [:each | self pushDown: each].
	selectors do: [:each | class removeMethod: each]
]]]

[[[
aReadStream peek
and not aReadStream word
]]]

[[[
skipSeparators
]]]

Pay attention that some word can be interpreted as interrogative while you want to give them an imperative meaning. For example compare

[[[
optimized
]]]

and

[[[
triggerOptimization
]]]

!!! Guideline: Indicate flow

When state, process is going from one object to another one, indicate the direction using meaningful names.

For example ==flattenProperties:== is not a good name because it does not convey where the properties will be flattened.
[[[
aConfiguration flattenProperties: aDictionary
]]]

Better names such ==flattenPropertiesFrom:== and ==flattenPropertiesInto:== are much better because there is no ambiquities.

[[[
aConfiguration flattenPropertiesFrom: aDictionary
aConfiguration flattenPropertiesInto: aDictionary
]]]


!!!  Guideline: Use interrogative form for testing
Use an interrogating the state of an object, use a selector beginning with a verb such as ==has==, ==is==, ==does==,...

[[[
isAtLineEnd
]]]
and not 
[[[
atLineEnd
]]]

!!!  Guideline: Accessors 


For accessors: 

[[[
tiles
	^ tiles 
]]]
or 

[[[
tiles
	^ tiles ifNil: [ tiles := OrderedCollection new ]
]]]

but not 
[[[
getTiles
	^ tiles
]]]

For Setters
[[[
tiles: aCollection
	tiles := aCollection 
]]]


!!! Guideline: Follow conventions and idioms

When designing new objects, you may mimic some practices that the system use already with for example dictionaries, sets,...

""Example.""
Since a stylesheet acts as a dictionary of properties it is much better to use
==at:== instead of ==get:== especially when the message to set a value to a property is ==at:put:== and not ==set:==.

[[[
stylesheet at: #fontColor
]]]
and not 
[[[
stylesheet get: #fontColor
]]]



!!! Guideline: Distinguish class vs. instance selectors

When defining a class method, we may name it the same way than an accessor of the class. Such practice hampers code readibility in the sense that identifying rapidly class methods is then difficult. The senders will report both the instance and class usage. You may think that you will identify the message because the receiver is a class or an instance but there are many situations were this is not the case. So better enriched the class method with a distinct word.



""Example.""
In Pillar, annotations have parameters and the accessor method ==parameters:==. Now some version defined also the instance creation method with the same name.

The following code that it was difficult to understand fast the code. Reading the code of the parser, it is not clear whether array second is a class or an instance.

[[[
annotation
	^ super annotation
		==>
			[ :array | array second parameters: (array third ifNil: [ SmallDictionary new ]) ]
]]]

To create an instance is better to name the method ==withParameter:==. This way we can immediatelly spot that the second element is a class. 

[[[
annotation
	^ super annotation
		==>
			[ :array | array second withParameters: (array third ifNil: [ SmallDictionary new ]) ]
]]]


[[[
PRAbstractAnnotation class >> withParameters: aCollection
	| parameters |
	parameters := self checkKeysOf: aCollection.
	^ self new
		hadAllKeys: aCollection = parameters;
		parameters: parameters;
		yourself
]]]

is better than

[[[
PRAbstractAnnotation class >> parameters: aCollection
	| parameters |
	parameters := self checkKeysOf: aCollection.
	^ self new
		hadAllKeys: aCollection = parameters;
		parameters: parameters;
		yourself
]]]
	
!! Instance initialization



!!! Guideline: Automatic object initialization 


[[[
Game >> initialize
	super initialize.
	turn := 0.
]]]


!!! Guideline: No automatic initialize

When you do not want to get the automatic initialization to happen you should use the message ==basicNew== on the class side and create your own ==initializeSomething:== method. 


[[[
Game class >> tilesNumber: aNumber
	^ self basicNew initializeNumber: aNumber ; yourself
]]]

[[[
Game >> initializeNumber: aNumber
	tiles := Array new: aNumber
]]]

!!! More advanced schema

You should  not use ==new== instead of ==basicNew== as this would result in the designated constructor of the superclass being called twice. For example:
[[[
Person >> initializeWithFoo: aNumber bar: aString
		self initialize.
		foo := aNumber.
		bar := aString
]]]

[[[
Person class >> foo: aNumber bar: aString
	^ self basicNew
		initializeWithFoo: aNumber bar: aString;
		yourself
]]]

!! Understanding Class and instance variable


- instance-variable: A variable that holds the private state of an object.  In Pharo, these can only be accessed by instance-methods. 

- class-variable: An attribute of a class that is shared by that class,  its subclasses, and  all  instances  of  those  classes.  Can  be  accessed  by  both  instance-methods and class-methods. 

- class-instance-variable:  An attribute  of a class that  is not shared outside that specific class. Only the definition is inherited by subclasses, not the value.   Each subclass has its own private value.  Accessible only by class-methods. 

Example: 
We will experiment with three different variables
- ivCounter - instance variable counter 
- CVCounter - class variable counter 
- CIVCounter - class instance variable counter 

[[[
Object subclass: #UnderstandCounter 
    instanceVariableNames: 'ivCounter iName' 
    classVariableNames: 'CVCounter' 
    package: 'MyExamples' 
]]]
[[[
UnderstandCounter class  "accessed by clicking the <Class> button" 
    instanceVariableNames: 'CIVCounter' 

]]]
[[[
UnderstandCounter subclass: #UnderstandSubCounter 
    instanceVariableNames: '' 
    classVariableNames: '' 
    package: 'MyExamples' 
]]]  

[[[
UnderstandCounter >> next 
    ivCounter ifNil: [ ivCounter := 0 ]. 
    CVCounter ifNil: [ CVCounter := 0 ]. 
    ivCounter := ivCounter + 1. 
    CVCounter := CVCounter + 1. 
]]]

[[[
UnderstandCounter >> printOn: aStream 
    super printOn: aStream. 
    aStream nextPutAll: ' ['. 
    aStream 
        print: iName.
    aStream nextPutAll: '] ( '.
    aStream
        nextPutAll: ' ivCounter=';
        print: ivCounter.
    aStream
        nextPutAll: ', CIVCounter=n/a'.
    aStream
        nextPutAll: ', CVCounter=';
        print: CVCounter.
    aStream nextPutAll: ' )'.
]]]


[[[
UnderstandCounter class >> next2
    CIVCounter ifNil: [ CIVCounter := 0 ].
    CVCounter ifNil: [ CVCounter := 0 ].

    CIVCounter := CIVCounter + 1.
    CVCounter := CVCounter + 1.
]]]  

[[[
UnderstandCounter class >> printOn: aStream 
    super printOn: aStream.
    aStream nextPutAll: ' ( '.
    aStream
        nextPutAll: 'ivCounter=n/a'.
    aStream
        nextPutAll: ', CIVCounter=';
        print: CIVCounter.
    aStream
        nextPutAll: ', CVCounter=';
        print: CVCounter.
    aStream nextPutAll: ' )'.
]]]  

[[[  
UnderstandCounter class >> reset 
    CVCounter := nil.
    CIVCounter := nil.
]]]  

Then from Workspace evaluate these...
[[[
tc1 := UnderstandCounter new.
tc2 := UnderstandCounter new.

tsc1 := TestSubCounter new.
tsc2 := TestSubCounter new.

TestCounter reset.
TestSubCounter reset.

tc1 next.
tc2 next.
tc1 next.
tc2 next.

tsc1 next.
tsc2 next.
tsc1 next.
tsc2 next.

TestCounter next2.
TestCounter next2.
TestCounter next2.

TestSubCounter next2.
TestSubCounter next2.
TestSubCounter next2.
]]]




!! Powerful coding idioms

!!! Guideline: Do not query twice for the same objects

The message ==ifNotNil:== expects a block 

[[[
self doThat ifNotNil: [ :that | self doSomethingWith: that ]
]]]

[[[
| that |
that := self doThat.
that ifNotNil: [self doSomethingWith: that]
]]]

Similarly have a look at the messages containing the ==ifPresent:== variation.
[[[
	aCol at: key ifPresent: [ :present | self doSomethingWith: present]
]]]

!! Code formatting

!!! Guideline:

!! Potential traps


