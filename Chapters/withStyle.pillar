Programming is a lot more than just writing algorithms or programs.
Programming is all about communication. 
Communication with others: the other programmers that will participate to your development effort but also with yourself. 
Indeed finding good names is a really important task because using the right name often opens the door to new spaces where your design can bloom and expand. 

The purpose of a programming style guide such as this book is to provide a simple vehicle for addressing the needs of a good communication. 
The goal is to make source code clear, easy to read, and easy to understand and extend. 

These conventions are not cast in stone but they set the foundation of a common culture. Culture is important when programming.

We got influenced by the excellent little book called ''Smalltalk with Style''. We hope that you will enjoy this one and that it will help you to become a better communicating designer. 

Feedback and suggestions are welcome at stephane.ducasse@inria.fr.
PullRequests on *https://github.com/SquareBracketAssociates/Booklet-PharoWithStyle* are also welcome.

Special thank to Christopher Furhman, Benoit St Jean and Masashi Fujita, Nathan Reilly for their feedback.
S. Ducasse - 30 December 2018.


!! General naming conventions

Names are important. We will never repeat it enough.
A good name is often driven by a domain.

!!! Guideline:  Favor simple direct meaning 

Some native English writers use often more precise but less common terms.
Consider that your software may be read by people from different cultures. So use simple, mainstream, and common terms.
Avoid hidden or implied meanings that can only be understood by a limited group of people. 
Make information explicit.


!!! Guideline: Avoid underscores and favor camel case

Prefer
[[[type=prefer
timeOfDay
]]]

over 
[[[type=not
Not timeofday
Not time_of_day
]]]

Prefer
[[[type=prefer
GnatXmlNode
]]]
over 
[[[type=not
Not GNAT_XML_Object
]]]

When creating private low-level methods that bind to external C-libraries, you may wan to use underscores to follow C conventions to ease tracing back the communication between libraries.
In such a case, limit your use to carefully thought cases.

!!! Guideline: Use camel case

Remember ==MaxLimit==, ==maxLimit==, ==maxlimit==, and ==MAXLIMIT== are all different identifiers in Pharo. 

[[[
| MaxLimit maxLimit |
MaxLimit := 10.
maxLimit := 20.
MaxLimit
>>> 10
]]]

Still, Pharo favors camel case, so use it systematically for words.
Wikipedia defines camel case as: Camel case (stylized as camelCase) is the practice of writing phrases such that each word or abbreviation in the middle of the phrase begins with a capital letter, with no intervening spaces or punctuation.

For local variables, method parameters and instance variables, use
[[[type=prefer
maxLimit
]]]
instead of
[[[type=not
Not maxlimit
Not MAXLIMIT
]]]


For classes, or shared variables, use 
[[[type=prefer
OrderedCollection
MaxLimit
]]]
instead of 
[[[type=not
Not ORDEREDCOLLECTION
Not MAXLIMIT
]]]

@@note In a compound word, do not confuse a prefix or suffix with a word when trying to determine which words should begin with an upper case letter. For example, some readers may think that the "c" in ==subclass== should be upper case, but ==sub== is a prefix, not a word. When in doubt about prefixes and suffixes, check a dictionary.

Prefer
[[[type=prefer
superclass
]]]
over
[[[type=not
Not superClass
]]]

!!! Guideline: Use descriptive names

Choose descriptive names that capture domain entities unambiguously.

Prefer
[[[type=prefer
timeOfDay
]]]
over 
[[[type=not
Not tod
]]]

Prefer
[[[type=prefer
milliseconds
]]]
over
[[[type=not
not mil
]]]

Prefer
[[[type=prefer
editMenu
]]]
over
[[[type=not
not eMenu
]]]


!!! Guideline: Pay attention to meaning

Non-English native speakers often misplace word qualifiers. 
In English the qualifier is often before the word it qualifies.

Prefer
[[[type=prefer
DateParser
]]]
over
[[[type=not
Not ParserForDate
]]]

Prefer
[[[type=prefer
userAssociation
]]]
(an association of users)

over
[[[type=not
Not associationUser
]]]
Compare the three following variables:

[[[
sizeToRead
sizeJustRead
readSize
]]]


In this situation, avoid homographs (*https://en.wiktionary.org/wiki/homograph*). 
That is, words that are written the same way but can have different meanings or pronunciations. 
For example, ''Did you read that book? ... Yes, I read it yesterday.''
About ==readSize==: does this mean that the size was just read (red) or it is the size to read (reed)?
Favor words with unique pronunciation.

!!! Guideline: Method selectors start with lowercase

Prefer
[[[type=prefer
getMethodsNamesFromAClass: aClass
	| methodsNames |
	methodsNames := aClass selectors.
	methodsNames do: [ :each | names add: each ]
]]]

over
[[[type=not
GetMethodsNamesFromAClass: aClass
	| methodsNames |
	methodsNames := aClass selectors.
	methodsNames do: [ :each | names add: each ]
]]]

Also, in this example the method selector is not good because method names are called selectors in Pharo.
In addition in English ==methodsNames== should be written ==methodNames==.
It should be ==gatherSelectorsFrom:== or something similar.



!!! Guideline: Follow domain 

Follow the domain concepts and culture of the project. 
Do not invent your own terms because you think they are better. 
Favor regularity (consistency) over preciseness.

Prefer
[[[type=prefer
GnatXmlNode
]]]

over 
[[[type=not
not GNAT_XML_Object
]]]

When representing the XML Ada abstract syntax tree in Pharo, we should not follow Ada naming conventions. 
The name should convey that the class is an abstract syntax tree node.
Hence ==GnatXmlNode== is much better than ==GnatXmlObject==.

Another example is the following:  In Moose, an importer is an object creating FAMIX entities (classes, methods, etc.) from the data structure representing a language element, usually an Abstract Syntax Tree (AST). 
Therefore ==GNATInstaller==, which creates entities from an AST, should be renamed ==GnatImporter==
and ==GNATImporter==, which loads an AST in memory should be renamed ==GnatASTLoader==.


!!! Guideline:  Shared variables start with uppercase 

Begin class names, global variables, pool variables, and class variables with an uppercase letter.
If the word is compound, then use use camel case for the rest.

[[[
Point	"Class"
Transcript 	"global variable"
PackageGlobalOrganizer	"class variables"
]]]

!!! Guideline:  Private variables start with lowercase 

Begin instance variables, temporary variables, method parameters, and method selectors with lower case. 
If the word is compound, then use camel case for the rest.

[[[
address
classExtensionSelectors
classTags
]]]


!!! Guideline: Favor unique meaning and pronunciation

Choose names that have a unique meaning.
Avoid homographs.

Prefer
[[[type=prefer
sizeToRead 
sizeJustRead
]]]

[[[type=not
Not readSize
]]]

Does this mean that the size was just read (red) or is it the size to read (reed)?



!!! Guideline: Class names should indicate the class' parent

Suffix class names with the root class to convey the kind of object we are talking about. 

For example, without the ==Morph== suffix, the reader is forced to check the superclass to understand if the class is about a graphical object or not. 

Prefer
[[[type=prefer
ClyBrowserButtonMorph
]]]
over 
[[[type=not
Not ClyBrowserButton
]]]

Prefer
[[[type=prefer
ClyQueryViewMorph
]]]
over
[[[type=not
Not ClyQueryView
]]]

In the following, not mentioning the ==Presenter== suffix makes it unclear to the reader that it is a Presenter object as opposed to a Model object.

Prefer
[[[type=prefer
ApplicationWithToolBarPresenter
]]]
over
[[[type=not
Not ApplicationWithToolbar
]]]

In the next example, ==DynamicWidgetChange== does not convey that this is not a ''domain'' object representing a change, but a ==Presenter== object in the Model-View-Presenter triad:

[[[type=prefer
DynamicWidgetChangePresenter
]]]
over
[[[type=not
Not DynamicWidgetChange
]]]


!!! Guideline: Avoid name collisions

To avoid name space collisions, add a prefix indicative of the project to the name of the class.

[[[
PRDocument
CmdMessage
]]]

@@note You may find that Pharo is lacking a namespace. If you have a couple hundred thousands euros, we can fix that!
Note, however, that even with a namespace you will have to pay attention that your namespace name does not collide with another one.




!! About variable names

When choosing an appropriate name for a variable, the developer is faced with the decision: ''Should I choose a name that conveys semantic meaning to tell the user how to use the variable, or should I choose a name that indicates the type of object the variable is storing?'' 
There are good arguments for both styles. Let us see what are the guidelines that can help us find the right balance.

!!! Guideline: Favor semantic variables

A semantic name is less restrictive than a type name. 
When modifying code, it is possible that a variable may change type. But unless one redefines the method, the semantics of it will not change. 
We recommend using semantically meaningful names wherever possible.

In the example below, the typed variable does not indicate how it will be used whereas the semantic variable does.

Prefer
[[[type=prefer
"Semantic variable"
newSizeOfArray := numberOfAdults size max: numberOfChildren size
]]]

over 
[[[type=not
"Typed variable"
anInteger := numberOfAdults size max: numberOfChildren size
]]]

Finding a semantic name is not always as obvious as demonstrated above. 
There are cases in which choosing a descriptive semantic name is difficult.


!!! Guideline: Use typed variables to indicate API

Suppose a String, a Symbol, and nil are valid for a parameter.
A developer may be tempted to use the name ==aStringOrSymbolOrNil==;
however, most developers choose ==aString== or ==anObject==.
==anObject== is a better choice with an accompanying comment that says, "anObject can be a String or aSymbol"

Below ==aDictionary== conveys that the argument should have the same API as a Dictionary (==at:==,==at:put:==)

Prefer
[[[type=prefer
properties: aDictionary
]]]

over
[[[type=not
Not properties: aCollection
]]]

You may also want to stress specific types in an API. 

Prefer 
[[[type=prefer
properties: aPuttable
]]]

over
[[[type=not
Not properties: aCollection
]]]



!!! Guideline: Get the best from semantic and type variable

A good practice is to use a mixture of both semantic and typed variable names. 
Method parameter names are usually named after their type. 
Instance, class, and temporary variables usually use a semantic name. 
In some cases, a combination of both can be given in the names.

Prefer
[[[type=prefer
ifTrue: trueBlock ifFalse: falseBlock
]]]

over
[[[type=not
Not ifTrue: block1 ifFalse: block2
Not ifTrue: action1 ifFalse: action2
]]]

The following are other examples of good names.

[[[
inject: initialValue into: aBinaryBlock 
copyFrom: start to: stop
findFirst: aBlock ifNone: errorBlock 
paddedTo: newLength with: anObject 
]]]


!!! Guideline: Use semantics for state variable

State variable names (instance variables, class variables, or class instance variables) are usually semantic-based. 
A combination of semantic and type information can be really powerful, too. 

Prefer
[[[type=prefer
"In class PhoneBook"
phoneNumber 
name
]]]

over
[[[type=not
Not number
Not labelForPerson
]]]


!!! Guideline: Use predicate for Boolean

Use predicate clauses or adjectives for Boolean objects or states.
Do not use predicate clauses for non-Boolean states.

[[[type=prefer
alarmEnabled
]]]

!!! Guideline: Use common nouns and phrases 

Use common nouns and phrases for objects that are not Boolean.

[[[
"In class Vehicle..."
	numberOfTires 
	numberOfDoors

"In class AlarmClock..."
	time 
	alarmTime

"In class TypeSetter..."
	page
	font 
	outputDevice
]]]

!! Selectors

Method names in Pharo are called selectors.
They are used in messages and are the main vehicle to convey adequate meaning.
The correct use of words and design of selectors is important.


!!! Guideline: Choose selectors to form short sentences
Choose method names so that someone reading the message can read the expression as if it were a sentence. 

Prefer
[[[type=prefer
FileDescriptor seekTo: word from: self position
]]]

[[[type=not
Not FileDescriptor lseek: word at: self position
]]]

Write the test first, and make sure that your test scenario reads well. 

!!! Guideline: Use imperative verbs for actions

Use imperative verbs for message which perform an action.

[[[type=prefer
transform
	selectors do: [:each | self pushDown: each].
	selectors do: [:each | class removeMethod: each]
]]]

Prefer
[[[type=prefer
aReadStream peek
]]]
over
[[[type=not
Not aReadStream word
]]]

Prefer
[[[
aFace lookSurprised 
]]]
over
[[[type=not
Not aFace surprised
]]]

[[[type=prefer
skipSeparators
]]]

Pay attention that some words can be interpreted as interrogative, whereas you want to give them an imperative meaning.

For example, compare:

[[[
optimized
]]]

and

[[[
triggerOptimization
]]]

!!! Guideline: Indicate flow with preposition

When a process state is going from one object to another, indicate the direction using meaningful names.

For example ==flattenProperties:== is not a good name because it does not convey where the properties will be flattened.

[[[type=not
aConfiguration flattenProperties: aDictionary
]]]

Better names such as ==flattenPropertiesFrom:== and ==flattenPropertiesInto:== are much better because there are no ambiguities.

[[[type=prefer
aConfiguration flattenPropertiesFrom: aDictionary
aConfiguration flattenPropertiesInto: aDictionary
]]]

Here are more examples
[[[type=prefer
changeField: anInteger to: anObject
]]]

Prefer
[[[type=prefer
ReadWriteStream on: aCollection.
]]]
over
[[[type=not
Not ReadWriteStream for: aCollection.
]]]

Prefer
[[[
File openOn: stream
]]]
over
[[[type=not
Not File with: stream
]]]

Prefer
[[[type=prefer
display: anObject on: aMedium
]]]
over
[[[type=not
Not display: anObject using: aMedium
]]]


!!! Guideline: Indicate return types

When a method is returning an object (different from the receiver) and that this object is not polymorphic 
with the receiver it is important to mention it. Since Pharo is not statically typed, we can use the selector name to give such information to the sender of the message.

For example, the method ==characterSeparatorMethodSignatureFor:== of the pretty printer did not return 
a character but a block as shown below:

[[[
characterSeparatorMethodSignatureFor: aMethodNode
	^ [
		(self needsMethodSignatureOnMultipleLinesFor: aMethodNode)
			ifTrue: [ self newLine ]
			ifFalse: [ self space ] ]
]]]

Favor ==characterSeparatorMethodSignatureBlockFor:== over ==characterSeparatorMethodSignatureFor:==
when the method returns block and not a character as ==characterSeparatorMethodSignatureFor:== indicates. 

A much better design is to rewrite this method and its users to use a character. 
Returning a block in such situation is overkill and it hampers reusing the method without being forced to send a message.

The following method is corresponding to its name.
[[[
characterSeparatorMethodSignatureFor: aMethodNode
	^ (self needsMethodSignatureOnMultipleLinesFor: aMethodNode)
			ifTrue: [ self newLine ]
			ifFalse: [ self space ]
]]]


!!!  Guideline: Use interrogative form for testing
When interrogating the state of an object, use a selector beginning with a verb such as ==has==, ==is==, ==does==,...

Prefer
[[[type=prefer
isAtLineEnd
]]]
over
[[[type=not
Not atLineEnd
]]]

[[[type=prefer
aVehicle hasFourWheels
]]]
over
[[[type=not
Not aVehicle fourWheels
]]]


!!! Guideline: Avoid using parameter and variable name type
Avoid the parameter type or name in the method name if you are using typed parameter names.

Prefer
[[[type=prefer
fileSystem at: aKey put: aFile
]]]
over
[[[type=not
Not fileSystem atKey: aKey putFiIe: aFile
]]]


[[[
"for semantic-based parameter names"	
fileSystem atKey: index putFile: pathName
]]]

[[[
"useful when your class has several #at:put: methods"
fileSystem definitionAt: aKey put: definition
]]]

Prefer
[[[type=prefer
aFace changeTo: expression
]]]
over
[[[type=not
Not aFace changeExpressionTo: expression
]]]

!!!  Guideline: Accessors 

There are different schools about whether to use accessors.
If you use accessors, use them consistently.
Also, name them also consistently:

For getter, prefer 
[[[type=prefer
tiles
	^ tiles
]]]
over 
[[[type=not
getTiles
	^ tiles
]]]
Do not use get in accessor selectors!


For lazy initialization:
[[[type=prefer
tiles
	^ tiles ifNil: [ tiles := OrderedCollection new ]
]]]


For Setters
[[[type=prefer
tiles: aCollection
	tiles := aCollection 
]]]

Put real accessors in the accessing protocols. 
When you have accessors doing extra work place them in a separate protocols to stress their difference.

!!! Guideline: Use basic or raw to access low-level

When two methods are needed for the same state variable, e.g., one returning the actual object stored and one returning and raising an event, prefix the one returning the actual object with the word ==basic== or ==raw==.

[[[
method: aCompiledMethod
	self basicMethod: aCompiledMethod.
	self signal: MethodChanged
	
basicMethod: aCompiledMethod
	method := aCompiledMethod
]]]

When you have a getter that returns an object and a getter than return a different representation of the same object add a suffix

[[[
path
	^ path

pathString
	^ self path asString
]]]

!!! Guideline: Follow conventions and idioms
When designing new objects, you may mimic some practices that the system uses already with for example dictionaries, sets, etc.

""Example.""
Since a style sheet acts as a dictionary of properties it is much better to use
==at:== instead of ==get:==, especially if you define the message to set a value to a property as ==at:put:== and not ==set:==.

Prefer
[[[type=prefer
stylesheet at: #fontColor
]]]
over
[[[type=not
stylesheet get: #fontColor
]]]

Prefer
[[[
aCollection groupedBy: [ :each | each odd ]
]]]
over
[[[type=not
Not aCollection groupBy: [ :each | each odd ]
]]]

Prefer
[[[
series at: #k3 put: 'x'.
]]]
over
[[[type=not
Not series atKey: #k3 put: 'x'
]]]

Prefer
[[[
aCollection at: #toto
]]]
over
[[[
Not aCollection atKey: #toto
]]]


!!! Guideline: Distinguish class vs. instance selectors

When defining a class method, we may name it the same way as an accessor of the class.
Such practice hampers code readability in the sense that it is difficult to identify rapidly class methods. 
The senders will report both the instance and class usage. 
You may think that you will identify the message because the receiver is a class or an instance but there are many situations were this is not the case. 
So it's better to enrich the class method with a distinct word.


!!!! Example
In Pillar, annotations have parameters and the accessor method ==parameters:==. 
Now, in some version, an instance creation method with the same name than the accessor method.

Reading the code of the parser, it is not clear whether array second is a class or an instance.

[[[type=not
annotation
	^ super annotation
		==>
			[ :array | array second parameters: (array third ifNil: [ SmallDictionary new ]) ]
]]]

To create an instance, it is better to name the method ==withParameter:==. 
This way we can immediately spot that the second element is a class. 

[[[type=prefer
annotation
	^ super annotation
		==>
			[ :array | array second withParameters: (array third ifNil: [ SmallDictionary new ]) ]
]]]


[[[
PRAbstractAnnotation class >> withParameters: aCollection

	| parameters |
	parameters := self checkKeysOf: aCollection.
	^ self new
		hadAllKeys: aCollection = parameters;
		parameters: parameters;
		yourself
]]]

is better than

[[[
PRAbstractAnnotation class >> parameters: aCollection
	| parameters |
	parameters := self checkKeysOf: aCollection.
	^ self new
		hadAllKeys: aCollection = parameters;
		parameters: parameters;
		yourself
]]]
	
Now if you favor a fluid interface with many parameters, using ==withParameters:== may not be good. 


!!! Guidelines: Follow existing protocols

Protocols are ways to sort methods.
It is important to place your methods in adequate protocols since it will ease future exploration of your class.

Pharo provides auto categorisation of protocol for the common methods.
So use it as much as possible.
When you override your specific methods, place them in similar protocols.


!! Comments
Comments are important. 
Comments tell readers that they are smart guys and that they correctly guessed your intentions or your code.
Do not believe people that say that methods do not need comments. Obviously here is what they mean:
# obvious methods such as accessors do not need comments,
# a good comment is not describing in English how the code executes,
# it is better to split long methods into smaller ones with a single responsibility,
# but a good comment is always welcome because it reinforces the understanding of the reader.

A comment should be adapted to the level of granularity (i.e., package, class, method) to which it applies.

!!! Guideline: Method comments

Method comments should contain sufficient information for a user to know exactly ""how to use"" the method, ""what"" the method does including any side effects, and ""what it answers"" without having to look at the source code. Imagine that the source code is not available.

The main method comment is not about its implementation. 
Do not rephrase the implementation. 
The second level comments can include information about the implementation. 
Insert a new line to separate method comments from the method body.

[[[
Collection >> asCommaString
    "Return collection printed as 'a, b, c' "
    "#('a' 'b' 'c') asCommaString >>> 'a, b, c'"
    
    ^ String streamContents: [:s | self asStringOn: s delimiter: ', ']
]]]

The comments of a  method should typically include:
# the method purpose (even if implemented or supplemented by a subclass)
# the parameters and their types
# the possible return values and their types
# complex or tricky implementation details
# example usage, if applicable, as a separate comment

Finally accessors do not need comments; the only comment that accessor could have is the purpose of the instance variable.

[[[
day
	"Answer number of days (an instance of Integer) from 
	the receiver to January 1, 1901."

	^ day
]]]

!!! Guideline: Avoid relying on a comment to explain what can be reflected in code

Good Pharo source code is self-documenting, often making comments on statements redundant. Statements need only be commented to draw the reader's attention. If the source code implements an algorithm that requires explanation, then the steps of the algorithm should be commented as needed.

Do not comment an obvious fact that is expressed simply as plain code.
	
[[[
| result |
result := self employees
	collect: [:employee | employee salary > amount].
]]]

[[[
Not 
| result |
"Store the employees who have a salary greater than in result." 
result := self employees
	collect: [:employee |  employee salary > amount].
]]]


!!! Guideline: Use active voice and short sentences

When writing comments, use active voice and avoid long and convoluted sentences.
A method comment should state what the method does, its arguments, its effects and output.

[[[
"Active voice"
createShell
	"Create the receiver's shell. Hook the focus callback."
]]]

[[[
Not "Passive voice"
createShell
	"The receiver's shell is created. The focus callback is hooked."
]]]


!!! Guideline: Include executable comments

Pharo offers executable examples in comment using the message ==>>>==. 
Executable examples in comments are super cool because as the reader you can execute the code and understand the parameters. 
In addition the documentation is always synchronized because the tools can check that the example is correct. 

[[[
ProtoObject >> ifNil: nilBlock ifNotNil: ifNotNilBlock
	"If the receiver is not nil, pass it as argument to the ifNotNilBlock block
	else execute the nilBlock block "
	
	"(nil ifNil: [42] ifNotNil: [:o | o + 3 ] ) >>> 42"
	"(3 ifNil: [42] ifNotNil: [:o | o + 3 ]) >>> 6"
	
	^ ifNotNilBlock cull: self
]]]

[[[
Object >> split: aSequenceableCollection
	"Split the argument using the receiver as a separator."
	"optimized version for single delimiters"
	"($/ split: '/foo/bar')>>>#('' 'foo' 'bar') asOrderedCollection"
	"([:c| c isSeparator] split: 'aa bb cc dd') >>> #('aa' 'bb' 'cc' 'dd') asOrderedCollection"
		
	| result |
	result := OrderedCollection new: (aSequenceableCollection size / 2) asInteger.
	self split: aSequenceableCollection do: [ :item |
		result add: item ].
	^ result
]]]

!!! Guideline: Use CRC-driven class comments

A class is not in isolation, but ''implements'' responsibilities (mainly one) and ''collaborates'' with other entities.
Therefore a class comment should be composed of at least 3 parts: the class, its responsibilities and how it uses its collaborators.
The Class Responsibility Collaboration (CRC) pattern is powerful to design but also to comment classes. Use it for commenting class.

Knowing the instance variables is the least importance!
Follow the template given by Pharo that is shown below.

[[[
Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:

For the Class part:  
	State a one line summary. For example, "I represent a paragraph of text".

For the Responsibility part: 
	Three sentences about my main responsibilities - what I do, what I know.

For the Collaborators Part: 
	State my main collaborators and one line about how I interact with them. 

Public API and Key Messages
	- message one   
	- message two 
	- (for bonus points) how to create instances.

One simple example is simply gorgeous.
 
Internal Representation and Key Implementation Points.

Implementation Points
]]]



!!! Guideline: Comment the unusual

When a behavior is unusual, performing unexpected actions or using an unexpected algorithm, it is important to comment it.
In general comments should make irregular and unusual aspects clearer.
You may want to include implementation-dependent, or platform specific idiosyncrasies.



!! About code formatting

Code formatting improves code comprehension.
Again follow the convention.

!!! Guideline: Be consistent

One important guideline when writing code is to follow conventions and in addition to be consistent.
Systematically apply a formatting style.
Keep the violations to convention to a minimum.


!!! Guideline: Use the general method template

- Separate method signature and comments from method body with an empty line. 
- Add an extra tab to the comments.
- Add an extra line to stress the beginning of the method body.
- Use a tab to separate the method body from the left margin.

[[[
message selector and argument names
	"A comment following the guidelines."
	
	| temporary variables |
	statements
]]]

For example:

[[[
addLast: newObject
	"Add newObject to the end of the receiver. Answer newObject."

	lastIndex = array size ifTrue: [ self makeRoomAtLast ].
	lastIndex := lastIndex + 1.
	array at: lastIndex put: newObject.
	^ newObject
]]]


!!! Guideline: Indent method body

Use indentation to convey structure! Do not glue everything on the left margin.

[[[
initialize
super initialize.
symbols := Bag new.
names := Set new
]]]

Prefer 
[[[
initialize

	super initialize.
	symbols := Bag new.
	names := Set new
]]]

!!! Guideline: Separate signature and comments from method body


Prefer
[[[
performCrawling: aName
	"Takes the last word in uppercase as a symbol and eventually add it to the bag symbols"

	name := aName copy.
	self getUpperCase.
	self stemSymbolFrom: aName.
	self toUpperCase.
	^ symbol
]]]

over

[[[
performCrawling: aName
	"Takes the last word in uppercase as a symbol and eventually add it to the bag symbols"
	name := aName copy.
	self getUpperCase.
	self stemSymbolFrom: aName.
	self toUpperCase.
	^ symbol
]]]

!!! Guideline: Use space to give breath to code

Put horizontal space to make it easier to read code and clearly identify variables, arguments, assignments, block delimiters and returns.

Prefer
[[[type=prefer
stemSymbolFrom: aName

	| stemmer symbol |
	stemmer := SymbolStemmer new.
	symbol := stemmer performCrawling: aName.
	^ symbol
]]]

Over 
[[[type=not
stemSymbolFrom:aName

	|stemmer symbol|
	stemmer:=SymbolStemmer new.
	symbol:=stemmer performCrawling:aName.
	^symbol
]]]

Parentheses do not need spaces since they show that an expression fits together. 
But favor space for ==[== and ==]==.

[[[type=prefer
drawOnAthensCanvas: aCanvas bounds: aRectangle color: aColor

	(self canDrawDecoratorsOn: aCanvas) ifFalse: [ ^ self ].
	self drawOnAthensCanvas: aCanvas.
	next drawOnAthensCanvas: aCanvas bounds: aRectangle color: aColor
]]]


!!! Guideline: Align properly

Make sure that your indentation reinforce the identification of block of functionality. 

Prefer
[[[type=prefer
self phoneBook add: 
	(Person new
		name: 'Robin';
		city: 'Ottawa'; 
		country: 'Canada').
]]]

Over 
[[[type=not
self phoneBook add: 
	(Person new
	name: 'Robin'; 
	city: 'Ottawa'; 
	country: 'Canada').
]]]


!!! Guideline: Use tabs not spaces to indent and use spaces to help reading

Avoid extra spaces everywhere.
Use one space to separate instructions.
Avoid extra spaces at the end of the line.
Avoid extra spaces at the beginning and use tabs to indent.

Prefer
[[[type=prefer
stemSymbolFrom: aName

	| stemmer symbol |
	stemmer := SymbolStemmer new.
	symbol := stemmer performCrawling: aName.
	^ symbol
]]]

over 

[[[type=not
stemSymbolFrom: aName
	|stemmer symbol|
      stemmer:=SymbolStemmer new. 
  symbol:=stemmer performCrawling: aName.
   ^symbol
]]]


!!! Guideline: Do not break lines randomly

White lines attract the eyes and force the reader to ask himself why the code is separated that way.
Only separate method signature and comment from method body with a new line.

Prefer
[[[
paragraph
	"this method is here to find the paragraph in the chain, instead of relying on implementing #doesNotUnderstand: !!!"

	| p |
	p := next.
	[ p isNotNil and: [ p isKindOf: RubParagraph ] ]
		whileFalse: [ p := p next ].
	^p
]]]

Over
[[[
paragraph
	"this method is here to find the paragraph in the chain, instead of relying on implementing #doesNotUnderstand: !!!"

	| p |
	
	p := next.
	
	[ p  isNotNil and: [ p isKindOf: RubParagraph ] ] whileFalse: [ 
		p := p next.
	].

	^p

]]]







!! Powerful coding idioms
Some coding idioms will make your code a lot clearer. 
Knowing them is also good because you will code faster.

!!! Guideline: Do not query twice for the same object

The message ==ifNotNil:== expects a block with one argument. 
This argument is the object that is not nil.

For example, 
[[[
self doThat ifNotNil: [ :that | self doSomethingWith: that ]
]]]

is better than: 
[[[
| that |
that := self doThat.
that ifNotNil: [self doSomethingWith: that]
]]]

Similarly have a look at the messages containing the ==ifPresent:== variations.
[[[
aCol at: key ifPresent: [ :present | self doSomethingWith: present]
]]]


!! Potential traps

Understanding possible mistakes is a nice way to avoid them or to spot errors made in your code.
Here are some common mistakes.


!!! Guideline: Use parentheses to disambiguate keyword messages

[[[
testDefineASimpleClass

	| uUMLClass |
	uUMLClass := UMLClass named: 'ComixSerie'.
	uUMLClass instVar: 'name'.
	self assert: uUMLClass variables includes: 'name'
]]]
There is no message ==assert:includes:==. 
The expression ==uUMLClass variables includes: 'name'== should be parenthesized.

[[[
testDefineASimpleClass

	| uUMLClass |
	uUMLClass := UMLClass named: 'ComixSerie'.
	uUMLClass instVar: 'name'.
	self assert: (uUMLClass variables includes: 'name')
]]]


!!! Guideline: receiver of ifTrue:ifFalse: is a boolean

Do not use a block as receiver of a ==ifTrue:==, ==ifFalse:==, ==ifTrue:ifFalse:== or ==ifFalse:ifTrue:== messages.

The following expressions does not work

[[[type=not
[lastNode =0] value 
	ifTrue:[ lastNode := curNode ]
	ifFalse:[ lastNode next: curNode ]
]]]

[[[type=not
[lastNode =0] 
	ifTrue:[ lastNode := curNode ]
	ifFalse:[ lastNode next: curNode ]
]]]

The correct is the following
[[[type=prefer
lastNode = 0 
	ifTrue:[ lastNode := curNode ]
	ifFalse:[ lastNode next: curNode ]
]]]

!!! Guideline: receiver of whileTrue: is a block

The receiver of the message ==whileTrue:== is a block, and its argument is, too. 

The following line is incorrect:
[[[type=not
(number < limit) whileTrue: [ do something ]
]]]

The following line is correct:
[[[type=prefer
[ number < limit ] whileTrue: [ do something ]
]]]


!!! Guideline: Use a Block when you do not know execution time

Often newcomers get confused about when to use ==( )== and ==[ ]==.
A good way to understand is that we should use ==[ ]== when we do know whether an expression will be executed (may be multiple times).

!!!! ifTrue:ifFalse:

The conditional is always executed, while each of the arguments is a block because we do not know which ones will be executed.
[[[
lastNode = 0 
	ifTrue: [ lastNode := curNode ]
	ifFalse: [ lastNode next: curNode ]
]]]

!!!! timesRepeat:
==timesRepeat:=='s argument is a block because we do not know how many times it will be executed.
[[[
n timesRepeat: [ lastNode := curNode next ]
]]]

!!!! do:/collect:
The argument of iterators such as ==do:==, ==collect:==,... is a block because we do not know how many times (if any) the block will 
be executed.

[[[
aCol do: [ :node | ...]
]]]

!! Conclusion

Remember that you write code once and will read it a thousand times.
Take the time to give good names.
However finding good names is not an easy task, but you can use refactorings to improve things easily.
This goes in pair with tests. 
You write a test once and it gets executed million times. 
Therefore, write tests to exercise the names you use and change them until they help you telling stories that can be understood.
